name: Healthcare Test Automation Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - smoke
          - api
          - integration
          - security

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  ENVIRONMENT: 'ci'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
      python-version: ${{ env.PYTHON_VERSION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Generate cache key
        id: cache-key
        run: echo "key=deps-${{ hashFiles('requirements.txt') }}-py${{ env.PYTHON_VERSION }}" >> $GITHUB_OUTPUT
      
      - name: Display workflow info
        run: |
          echo "ðŸ”§ Running Healthcare Test Pipeline"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Python: ${{ env.PYTHON_VERSION }}"

  lint-and-security:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ needs.setup.outputs.python-version }}
          cache: 'pip'
          
      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pylint black isort safety bandit
          
      - name: Run Black formatter check
        run: black --check --diff libraries/ tests/ utils/
        continue-on-error: true
        
      - name: Run isort import check
        run: isort --check-only --diff libraries/ tests/ utils/
        continue-on-error: true
        
      - name: Run Flake8
        run: flake8 libraries/ tests/ utils/ --max-line-length=120 --extend-ignore=E203,W503
        continue-on-error: true
        
      - name: Run Pylint
        run: pylint libraries/ utils/ --disable=C0111,C0103,R0913,R0914
        continue-on-error: true
        
      - name: Security scan with Bandit
        run: bandit -r libraries/ utils/ -f json -o bandit-report.json
        continue-on-error: true
        
      - name: Check for security vulnerabilities
        run: safety check --json
        continue-on-error: true
        
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
          retention-days: 30

  unit-tests:
    runs-on: ubuntu-latest
    needs: setup
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: healthcare_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            deps-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov pytest-xdist
          
      - name: Initialize test database
        run: |
          export PGPASSWORD=test_password
          psql -h localhost -U test_user -d healthcare_test -f data/sql_scripts/healthcare_schema.sql
          
      - name: Run unit tests
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: healthcare_test
          DB_USER: test_user
          DB_PASSWORD: test_password
        run: |
          pytest tests/unit/ -v --cov=libraries --cov=utils --cov-report=xml --cov-report=html --junit-xml=results/junit-unit.xml
          
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: unit-test-results
          path: |
            results/junit-unit.xml
            htmlcov/
            coverage.xml

  api-tests:
    runs-on: ubuntu-latest
    needs: [setup, lint-and-security]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: healthcare_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            deps-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Initialize test database
        run: |
          export PGPASSWORD=test_password
          psql -h localhost -U test_user -d healthcare_test -f data/sql_scripts/healthcare_schema.sql
          
      - name: Run API tests
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: healthcare_test
          DB_USER: test_user
          DB_PASSWORD: test_password
          API_BASE_URL: https://dev-api-healthcare.example.com
        run: |
          pytest tests/api/ -v --html=results/api-test-report.html --self-contained-html --junit-xml=results/junit-api.xml
          
      - name: Upload API test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: api-test-results
          path: |
            results/api-test-report.html
            results/junit-api.xml

  ui-tests:
    runs-on: ubuntu-latest
    needs: [setup, lint-and-security]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: healthcare_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            deps-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Install Playwright browsers
        run: |
          playwright install chromium firefox webkit
          playwright install-deps
          
      - name: Initialize test database
        run: |
          export PGPASSWORD=test_password
          psql -h localhost -U test_user -d healthcare_test -f data/sql_scripts/healthcare_schema.sql
          
      - name: Run UI tests
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: healthcare_test
          DB_USER: test_user
          DB_PASSWORD: test_password
          BASE_URL: https://dev-healthcare.example.com
          HEADLESS: true
          BROWSER: chromium
        run: |
          robot --outputdir results/robot-results --report report.html --log log.html tests/ui/
          
      - name: Generate Allure report
        if: always()
        run: |
          mkdir -p results/allure-results
          # Convert Robot Framework results to Allure format
          # This would require additional setup for allure-robotframework
          
      - name: Upload UI test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: ui-test-results
          path: |
            results/robot-results/
            results/screenshots/
            results/videos/

  database-tests:
    runs-on: ubuntu-latest
    needs: [setup, lint-and-security]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: healthcare_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            deps-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Initialize test database
        run: |
          export PGPASSWORD=test_password
          psql -h localhost -U test_user -d healthcare_test -f data/sql_scripts/healthcare_schema.sql
          
      - name: Run database tests
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: healthcare_test
          DB_USER: test_user
          DB_PASSWORD: test_password
        run: |
          robot --outputdir results/db-results --include database tests/database/
          
      - name: Upload database test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: database-test-results
          path: results/db-results/

  performance-tests:
    runs-on: ubuntu-latest
    needs: [api-tests, ui-tests]
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf]')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install performance testing tools
        run: |
          python -m pip install --upgrade pip
          pip install locust pytest-benchmark
          
      - name: Run performance tests
        env:
          BASE_URL: https://dev-healthcare.example.com
          API_BASE_URL: https://dev-api-healthcare.example.com
        run: |
          # Run Locust performance tests
          locust -f tests/performance/locustfile.py --headless --users 10 --spawn-rate 2 --run-time 300s --host $API_BASE_URL --html results/performance-report.html
          
      - name: Upload performance results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-test-results
          path: results/performance-report.html

  security-tests:
    runs-on: ubuntu-latest
    needs: [api-tests]
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[security]')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install security testing tools
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install zap-python requests-oauthlib
          
      - name: Run security tests
        env:
          BASE_URL: https://dev-healthcare.example.com
          API_BASE_URL: https://dev-api-healthcare.example.com
        run: |
          # Run security-specific tests
          pytest tests/security/ -v --html=results/security-test-report.html --self-contained-html
          
      - name: Upload security test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-test-results
          path: results/security-test-report.html

  generate-report:
    runs-on: ubuntu-latest
    needs: [unit-tests, api-tests, ui-tests, database-tests]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all test artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts/
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install report generation tools
        run: |
          python -m pip install --upgrade pip
          pip install jinja2 pytest-html allure-pytest
          
      - name: Generate consolidated report
        run: |
          python scripts/generate_consolidated_report.py artifacts/ results/consolidated-report.html
          
      - name: Upload consolidated report
        uses: actions/upload-artifact@v3
        with:
          name: consolidated-test-report
          path: results/consolidated-report.html
          
      - name: Publish test results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Healthcare Test Results
          path: 'artifacts/**/*junit*.xml'
          reporter: java-junit

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [generate-report]
    if: github.ref == 'refs/heads/develop' && success()
    environment: staging
    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add deployment scripts here
          
  notify:
    runs-on: ubuntu-latest
    needs: [generate-report]
    if: always()
    steps:
      - name: Send test notification
        run: |
          echo "Pipeline completed"
          echo "Results:"
          echo "- Status: ${{ needs.generate-report.result }}"
          echo "Notification sent (configure SLACK_WEBHOOK_URL secret for Slack notifications)"